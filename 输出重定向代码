myredirect.c

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <fcntl.h>
#include <string.h>

// 方法1：使用dup2系统调用
void redirect_dup2(const char* filename) {
    int fd = open(filename, O_WRONLY | O_CREAT | O_TRUNC, 0644);
    if (fd < 0) {
        perror("open");
        exit(EXIT_FAILURE);
    }
    dup2(fd, STDOUT_FILENO);
    close(fd);
}

// 方法2：使用freopen库函数
void redirect_freopen(const char* filename) {
    if (freopen(filename, "w", stdout) == NULL) {
        perror("freopen");
        exit(EXIT_FAILURE);
    }
}

// 方法3：使用文件描述符直接操作
void redirect_fd(const char* filename) {
    close(STDOUT_FILENO);
    int fd = open(filename, O_WRONLY | O_CREAT | O_TRUNC, 0644);
    if (fd < 0) {
        perror("open");
        exit(EXIT_FAILURE);
    }
}

int main(int argc, char *argv[]) {
    if (argc != 5 || strcmp(argv[1], "-t") != 0) {
        fprintf(stderr, "Usage: %s -t n command output_file\n", argv[0]);
        fprintf(stderr, "  n: 1(dup2), 2(freopen), 3(fd)\n");
        return EXIT_FAILURE;
    }

    int method = atoi(argv[2]);
    if (method < 1 || method > 3) {
        fprintf(stderr, "Error: n must be 1, 2 or 3\n");
        return EXIT_FAILURE;
    }

    const char* command = argv[3];
    const char* output_file = argv[4];

    // 根据选择的方法进行重定向
    switch (method) {
        case 1: redirect_dup2(output_file); break;
        case 2: redirect_freopen(output_file); break;
        case 3: redirect_fd(output_file); break;
    }

    // 执行命令
    system(command);

    return EXIT_SUCCESS;
}
